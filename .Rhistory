tm_polygons()+
tm_shape(boulder_fire_stations_projected)+
tm_dots("red", size=0.1)+
tm_shape(boulder_hospitals)+
tm_dots("blue", size=0.1)
firestations_hospitals
# distance to closest fire station for each hospital
apply(boulder_hospital_firstation_distancematrix_df, 1, FUN=min)
boulder_hospital_firstation_distancematrix_df
View(boulder_hospital_firstation_distancematrix_df)
# distance to closest fire station for each hospital
HOSPITAL_closest_fire_station<-apply(boulder_hospital_firstation_distancematrix_df, 1, FUN=min)
HOSPITAL_closest_fire_station %>% datatable(extensions=c("Scroller", "FixedColumns"), options = list(
deferRender = TRUE,
scrollY = 350,
scrollX = 350,
dom = "t",
scroller = TRUE,
fixedColumns = list(leftColumns = 1)
))
# distance to closest fire station for each hospital
HOSPITAL_closest_fire_station<-apply(boulder_hospital_firstation_distancematrix_df, 1, FUN=min)
HOSPITAL_closest_fire_station
# distance to closest fire station for each hospital
HOSPITAL_closest_fire_station<-apply(boulder_hospital_firstation_distancematrix_df, 1, FUN=min)
class(FIRESTATION_closest_hospital)
# distance to closest fire station for each hospital
HOSPITAL_closest_fire_station<-apply(boulder_hospital_firstation_distancematrix_df, 1, FUN=min)
class(HOSPITAL_closest_fire_station)
FIRESTATION_closest_hospital<-as.data.frame(FIRESTATION_closest_hospital)
# distance to closest hospital for each fire station
FIRESTATION_closest_hospital<-apply(boulder_hospital_firstation_distancematrix_df, 2, FUN=min)
FIRESTATION_closest_hospital<-as.data.frame(FIRESTATION_closest_hospital)
FIRESTATION_closest_hospital %>% datatable(extensions=c("Scroller", "FixedColumns"), options = list(
deferRender = TRUE,
scrollY = 350,
scrollX = 350,
dom = "t",
scroller = TRUE,
fixedColumns = list(leftColumns = 1)
))
FIRESTATION_closest_hospital %>% datatable(extensions=c("Scroller", "FixedColumns"), options = list(
deferRender = TRUE,
scrollY = 350,
scrollX = 350,
dom = "t",
scroller = TRUE,
fixedColumns = list(leftColumns = 1)
))
HOSPITAL_closest_fire_station %>% datatable(extensions=c("Scroller", "FixedColumns"), options = list(
deferRender = TRUE,
scrollY = 350,
scrollX = 350,
dom = "t",
scroller = TRUE,
fixedColumns = list(leftColumns = 1)
))
HOSPITAL_closest_fire_station<-as.data.frame(HOSPITAL_closest_fire_station)
HOSPITAL_closest_fire_station %>% datatable(extensions=c("Scroller", "FixedColumns"), options = list(
deferRender = TRUE,
scrollY = 350,
scrollX = 350,
dom = "t",
scroller = TRUE,
fixedColumns = list(leftColumns = 1)
))
firestations_hospitals
tm_shape(boulder_county_projected)+
tm_polygons()+
tm_shape(boulder_hospitals)+
tm_dots("blue")+
tm_shape(hospital_buffers)+
tm_borders(alpha=0.5, "blue", lwd=3)
tm_shape(boulder_county_projected)+
tm_polygons()+
tm_shape(boulder_fire_stations_projected)+
tm_dots("red")+
tm_shape(fire_station_buffers)+
tm_borders(alpha=0.5, "red", lwd=3)
tm_shape(boulder_county_projected)+
tm_polygons()+
tm_shape(boulder_fire_stations_projected)+
tm_dots("red")+
tm_shape(fire_station_buffers)+
tm_borders(alpha=0.5, "red", lwd=3)+
tm_shape(boulder_hospitals)+
tm_dots("blue")+
tm_shape(hospital_buffers)+
tm_borders(alpha=0.5, "blue", lwd=3)
tm_shape(boulder_county_projected)+
tm_polygons()+
tm_shape(hospital_firestation_intersection)+
tm_polygons("orange")
tm_shape(boulder_county_projected)+
tm_polygons()+
tm_shape(hospital_firestation_intersection_dissolve)+
tm_polygons("orange")
states_bounding_box_intersect<-
continental_USA_regions %>%
st_filter(arbitrary_bounding_box, .predicate=st_intersects)
tm_shape(states_bounding_box_intersect)+
tm_polygons()
View(usa_state_boundaries)
View(malawi_projects_constituencies_spatialjoin)
trade_2015_spatial
View(trade_2015_spatial)
states_bounding_box_inverse<-st_difference(continental_USA_regions, arbitrary_bounding_box)
tm_shape(states_bounding_box_inverse)+
tm_polygons()
fire_hospital_intersection_area_sqmiles<-set_units(fire_hospital_intersection_area, "miles^2")
fire_hospital_intersection_area_sqmiles
fire_hospital_intersection_area
fire_hospital_intersection_area<-st_area(hospital_firestation_intersection_dissolve)
tm_shape(boulder_county_projected)+
tm_polygons()+
tm_shape(hospital_firestation_intersection_dissolve)+
tm_polygons("orange")
Griffiss Air Force Base
getwd()
tm_shape(boulder_tract_areas)+tm_polygons()
tm_shape(boulder_tract_areas)+
tm_polygons()+
tm_shape(hospital_firestation_intersection_dissolve)+
tm_polygons()
tm_shape(boulder_tract_areas)+
tm_polygons()+
tm_shape(hospital_firestation_intersection_dissolve)+
tm_lines()
tm_shape(boulder_tract_areas)+
tm_polygons()+
tm_shape(hospital_firestation_intersection_dissolve)+
tm_polygons()
tm_shape(boulder_tract_areas)+
tm_polygons()+
tm_shape(hospital_firestation_intersection_dissolve)+
tm_polygons()
tm_shape(hospital_firestation_intersection_dissolve)+
tm_polygons()
tm_shape(boulder_tract_areas)+
tm_polygons()+
tm_shape(hospital_firestation_intersection_dissolve)+
tm_polygons("red")
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_intersects)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_overlaps)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_contains)
x
?st_filter
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_covered_by)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_crosses)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_overlaps)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_within)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_touches)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_overlaps)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_contains_properly)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_contains)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_covered_by)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_covers)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_crosses)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_equals)
x
x<-boulder_tract_areas %>%
st_filter(hospital_firestation_intersection_dissolve, .predicate=st_overlaps)
x
co_aurora<-read_csv("/Users/adra7980/Desktop/co_aurora_2020_04_01.csv")
View(co_auroa)
View(co_aurora)
co_aurora_sf<-co_aurora %>%
drop_na(long) %>%
st_as_sf(coords=c("long", "lat"), crs=4326)
co_aurora_sf<-co_aurora %>%
drop_na(long) %>%
st_as_sf(coords=c("lng", "lat"), crs=4326)
co_aurora_sf<-co_aurora %>%
drop_na(lng) %>%
st_as_sf(coords=c("lng", "lat"), crs=4326)
tm_shape(co_aurora_sf)+
tm_dots()
CO_tracts<-get_decennial(geography = "tract",
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(4326)
tm_shape(CO_tracts)+
tm_polygons()+
tm_shape(co_aurora_sf)+
tm_dots()
View(CO_tracts)
stops_tracts<-st_join(co_aurora_sf, CO_tracts)
View(stops_tracts)
stops_tracts_join<-st_join(co_aurora_sf, CO_tracts)
stop_per_tract<-stops_tracts_join %>%
group_by(GEOID) %>%
summarize(n())
View(stop_per_tract)
# Read in data
co_aurora_stops<-read_csv("/Users/adra7980/Desktop/co_aurora_2020_04_01.csv")
# Define spatial object
co_aurora_sf<-co_aurora %>%
drop_na(lng) %>%
st_as_sf(coords=c("lng", "lat"), crs=4326)
# map points
tm_shape(co_aurora_sf)+
tm_dots()
# extract CO tract-level data
CO_tracts<-get_decennial(geography = "tract",
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(4326)
# map data together
tm_shape(CO_tracts)+
tm_polygons()+
tm_shape(co_aurora_sf)+
tm_dots()
# execute join
stops_tracts_join<-st_join(co_aurora_sf, CO_tracts)
# extract stops/tract
stop_per_tract<-stops_tracts_join %>%
group_by(GEOID) %>%
summarize(n())
stop_per_tract
View(co_aurora_stops)
?read_sf
CO_tracts<-get_decennial(geography = "block",
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(4326)
View(CO_tracts)
CO_tracts<-get_decennial(geography = "county subdivision",
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(4326)
View(CO_tracts)
traffic_stop_geography<-function(desired_geography){
geography_extract<-get_decennial(geography = desired_geography,
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(4326)
stop_geography_join<-st_join(co_aurora_sf, geography_extract)
stops_per_geography<-stop_geography_join %>%
group_by(GEOID) %>%
summarize(n())
return(stops_per_geography)
}
traffic_stop_geography("county subdivision")
county_subdivision_level<-traffic_stop_geography("county subdivision")
View(county_subdivision_level)
traffic_stop_geography<-function(desired_geography){
geography_extract<-get_decennial(geography = desired_geography,
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(4326)
stop_geography_join<-st_join(co_aurora_sf, geography_extract)
stops_per_geography<-stop_geography_join %>%
group_by(GEOID, NAME) %>%
summarize(n())
return(stops_per_geography)
}
county_subdivision_level<-traffic_stop_geography("county subdivision")
View(county_subdivision_level)
aurora_latlong<-co_aurora_stops %>% select(lat, lng)
aurora_latlong
test<-data.matrix(aurora_latlong)
test
View(test)
class(test)
list_output<-map(desired_geography, traffic_stop_geography)
desired_geography<-c("tract", "county subdivision")
list_output<-map(desired_geography, traffic_stop_geography)
list_output
county_subdivision_level<-traffic_stop_geography(desired_geography="county subdivision")
# create input vector
desired_geography<-list("tract", "county subdivision")
list_output<-map(desired_geography, traffic_stop_geography)
# create input vector
desired_geography<-c("tract", "county subdivision")
list_output<-map(desired_geography, traffic_stop_geography)
list_output
# name list elements
names(list_output)<-desired_geography
list_output
getwd()
names(list_output)
name_vector<-names(list_output)
name_vector
output_csv<-function(list_csv, name_vector){
write_csv(name_vector, paste0(".csv"))
}
output_csv(CO_counties)
output_csv(CO_counties, "cocounties")
CO_counties
?st_write
CO_counties_df<-as.data.frame(CO_counties)
output_csv(CO_counties_df, "cocounties")
class(CO_counties_Df)
class(CO_counties_df)
output_csv(list_csv=CO_counties_df, name_vector="cocounties")
output_csv<-function(list_csv, name_vector){
filename<-paste0(name_vector, ".csv")
write_csv(list_csv, filename)
}
output_csv(list_csv=CO_counties_df, name_vector="cocounties")
output_csv<-function(files, name){
filename<-paste0(name_vector, ".csv")
write_csv(list_csv, filename)
}
# write function
traffic_stop_geography<-function(desired_geography){
geography_extract<-get_decennial(geography = desired_geography,
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(4326)
stop_geography_join<-st_join(co_aurora_sf, geography_extract)
stops_per_geography<-stop_geography_join %>%
group_by(GEOID, NAME) %>%
summarize(n())
stops_per_geography_df<-as.data.frame(stops_per_geography)
return(stops_per_geography_df)
}
# create input vector
desired_geography<-c("tract", "county subdivision")
list_output<-map(desired_geography, traffic_stop_geography)
list_output
names(list_output)
name_vector<-names(list_output)
names(list_output)
# name list elements
names(list_output)<-desired_geography
names(list_output)
output_csv<-function(files, name){
filename<-paste0(name_vector, ".csv")
write_csv(list_csv, filename)
}
walk2(files=list_output, name=name_vector, output_csv)
walk2(files=list_output, name=name_vector, .f=output_csv)
name_vector
name_vector<-names(list_output)
name_vector
walk2(files=list_output, name=name_vector, .f=output_csv)
walk2(list_output, name_vector, .f=output_csv)
name
list_output
name_vector
walk2(list_output, name_vector, .f=output_csv)
output_csv<-function(files, name){
filename<-paste0(name_vector, ".csv")
write_csv(files, filename)
}
walk2(list_output, name_vector, .f=output_csv)
name_vector
# iterate writing out
name_vector<-c("tract", "county subdivision")
walk2(list_output, name_vector, .f=output_csv)
# iterate writing out
name_vector<-c("tract", "county_subdivision")
walk2(list_output, name_vector, .f=output_csv)
list_output
# iterate writing out
name_vector<-list("tract", "county_subdivision")
walk2(list_output, name_vector, .f=output_csv)
# iterate writing out
name_vector<-c("tract", "county_subdivision")
walk2(list_output, names(list_output), .f=output_csv)
map2(list_output, names(list_output), .f=output_csv)
output_csv<-function(files, name){
filename<-paste0(name, ".csv")
write_csv(files, filename)
}
walk2(list_output, names(list_output), .f=output_csv)
# iterate writing out
name_vector<-c("tract", "county_subdivision")
walk2(files=list_output, name=name_vector, .f=output_csv)
# iterate writing out
name_vector<-c("tract", "county_subdivision")
walk2(list_output, name_vector, .f=output_csv)
list_output
tracts<-traffic_stop_geography(desired_geography="county subdivision")
county_sd<-traffic_stop_geography(desired_geography="county subdivision")
output_csv(county_sd, "county_subdivision")
View(county_sd)
write_csv(county_sd, "county_test.csv")
?write_csv
county_sd_two<-county_sd %>% select(-geometry)
county_sd
county_sd_two
write_csv(county_sd_two, "countysdtwo.csv")
View(county_sd_two)
# write function
traffic_stop_geography<-function(desired_geography){
geography_extract<-get_decennial(geography = desired_geography,
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(4326)
stop_geography_join<-st_join(co_aurora_sf, geography_extract)
stops_per_geography<-stop_geography_join %>%
group_by(GEOID, NAME) %>%
summarize(n()) %>%
stops_per_geography_df<-as.data.frame(stops_per_geography) %>%
select(-geometry)
return(stops_per_geography_df)
}
# test function
county_subdivision_level<-traffic_stop_geography(desired_geography="county subdivision")
# write function
traffic_stop_geography<-function(desired_geography){
geography_extract<-get_decennial(geography = desired_geography,
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(4326)
stop_geography_join<-st_join(co_aurora_sf, geography_extract)
stops_per_geography<-stop_geography_join %>%
group_by(GEOID, NAME) %>%
summarize(n()) %>%
stops_per_geography_df<-as.data.frame(stops_per_geography)
return(stops_per_geography_df)
}
# test function
county_subdivision_level<-traffic_stop_geography(desired_geography="county subdivision")
# write function
traffic_stop_geography<-function(desired_geography){
geography_extract<-get_decennial(geography = desired_geography,
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(4326)
stop_geography_join<-st_join(co_aurora_sf, geography_extract)
stops_per_geography<-stop_geography_join %>%
group_by(GEOID, NAME) %>%
summarize(n())
stops_per_geography_df<-as.data.frame(stops_per_geography)
return(stops_per_geography_df)
}
# test function
county_subdivision_level<-traffic_stop_geography(desired_geography="county subdivision")
# write function
traffic_stop_geography<-function(desired_geography){
geography_extract<-get_decennial(geography = desired_geography,
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(4326)
stop_geography_join<-st_join(co_aurora_sf, geography_extract)
stops_per_geography<-stop_geography_join %>%
group_by(GEOID, NAME) %>%
summarize(n())
stops_per_geography_df<-as.data.frame(stops_per_geography) %>%
select(-geometry)
return(stops_per_geography_df)
}
# test function
county_subdivision_level<-traffic_stop_geography(desired_geography="county subdivision")
View(county_subdivision_level)
# create input vector
desired_geography<-c("tract", "county subdivision")
list_output<-map(desired_geography, traffic_stop_geography)
list_output
# name list elements
names(list_output)<-desired_geography
names(list_output)
name_vector<-names(list_output)
output_csv<-function(files, name){
filename<-paste0(name, ".csv")
write_csv(files, filename)
}
walk2(list_output, name_vector, .f=output_csv)
View(fire_station_buffers)
