d
r
h
# Print data distribution using sample of cells
summary(nyc_2019_population)
?ggplot()
# Plot histogram of cell-level population
ggplot()+
geom_histogram(data=nyc_2019_population_df,
aes(nyc_2019_pop),
bins=10)
# Plot histogram of cell-level population
ggplot()+
geom_histogram(data=nyc_2019_population_df,
aes(nyc_2019_pop),
bins=10)
g
y
tmap_mode("plot")
# Makes basic plot of "nyc_2019_population" raster object
tm_shape(nyc_2019_population)+
tm_raster()
# shifts tmap to view mode
tmap_mode("view")
# Makes basic plot of "nyc_2019_population" raster object in view mode
tm_shape(nyc_2019_population)+
tm_raster()
tmap_mode("plot")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=10, palette="YlGnBu")
tm_shape(nyc_2019_population)+
tm_raster()
tmap_mode("view")
tm_shape(nyc_2019_population)+
tm_raster()
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=10, palette="-YlGnBu")
tmap_mode("plot")
tmap_mode("plot")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=10, palette="YlGnBu")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=10, palette="-YlGnBu")
tmap_mode("plot")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=8, palette="PuRd")
tmap_mode("plot")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=8, palette="-PuRd")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=8, palette="-RdPu")
tmap_mode("plot")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=8, palette="-PuRd")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=10, palette="-YlGnBu")
my_colors<-c("grey1", "gold", "orange", "orangered", "orangered4")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=5, palette=my_colors, colorNA="grey", textNA="")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=8, palette="PuRd", colorNA="grey")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=8, palette="-PuRd", colorNA="grey")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=8, palette="-PuRd", colorNA="grey")
my_colors<-c("grey1", "gold", "orange", "orangered", "orangered4")
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=5, palette=my_colors, colorNA="grey", textNA="")
# Uses "my_colors" palette to make raster map with 5 intervals based on "nyc_2019_population" object; NA values are plotted in grey, and NA category is removed from legend
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=5, palette=my_colors, colorNA="grey", textNA="")
# Uses "my_colors" palette to make raster map with 5 intervals based on "nyc_2019_population" object; NA values are plotted in grey, and NA category is removed from legend
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=5, palette=my_colors, colorNA="grey", textNA="")
# Uses "my_colors" palette to make raster map with 5 intervals based on "nyc_2019_population" object; NA values are plotted in grey, and NA category is removed from legend
tm_shape(nyc_2019_population)+
tm_raster(style="equal", n=5, palette=my_colors, colorNA="grey", textNA="")
tm_shape(nyc_2019_population)+
tm_raster(style="equal",
n=5,
palette=my_colors,
colorNA="grey",
textNA="",
title="Cell Population")+
tm_layout(legend.title.size=0.6,
legend.title.fontface = 2,
legend.text.size = 0.6,
main.title="Spatial Distribution of NYC Population, 2019",
main.title.size=0.8)
?tmap_save
test<-nyc_2019_population*2
test_df<-as.data.frame(test, xy=T)
View(test)
class(test)
test
test_df<-as.data.frame(test, xy=TRUE)
View(test_df)
View(nyc_2019_population_df)
5336.926/2
4656.249/2
nyc_2019_population_spatraster
?rast
?project
?project
nyc_population_2263
# Prints metadata associated with "nyc_population_2263"
nyc_population_2263
nyc_2019_population
tm_shape(nyc_2019_population)+
tm_raster(palette="-RdPu")+
tm_shape(manhattan)+
tm_polygons("green", alpha=0.4)
?as
manhattan_cropped
nyc_2019_population
manhattan_final_raster
# Prints metadata for "manhattan_cropped"
manhattan_cropped
nyc_2019_population
# Plot "population_pct_change_2019_2009"
tm_shape(population_pct_change_2019_2009)+
tm_raster(palette="-RdPu", colorNA="grey", textNA="")
manhattan_final_raster
manhattan_final_raster
# Convert
manhattan_final_raster<-mask(manhattan_cropped, manattan_spatialdf)
manhattan_final_raster
tm_shape(manhattan_final_raster)+
tm_raster(palette="-RdPu")
tm_shape(manhattan_final_raster)+
tm_raster(palette="-RdPu", colorNA="grey", textNA="")
tm_shape(manhattan_final_raster, bbox = lower_manhattan_bounding_box)+
tm_raster(palette="-RdPu", colorNA="grey", textNA="")
nyc_2009_population
# Plot "population_change_2009_2019" to visualize population change
tm_shape(population_change_2009_2019)+
tm_raster(palette="-RdPu", colorNA="grey", textNA="")
# Plot "population_change_2009_2019" to visualize population change
tm_shape(population_change_2009_2019)+
tm_raster(palette="-RdPu", n=8, colorNA="grey", textNA="")
# Plot "population_change_2009_2019" to visualize population change
tm_shape(population_change_2009_2019)+
tm_raster(palette="-RdPu", n=6, colorNA="grey", textNA="")
population_pct_change_2019_2009<-((nyc_2019_population-nyc_2009_population)/nyc_2009_population)*100
population_pct_change_2019_2009
population_pct_change_2019_2009
summary(population_pct_change_2019_2009, maxsamp=ncell(population_pct_change_2019_2009))
summary(population_pct_change_2019_2009, maxsamp=ncell(population_pct_change_2019_2009))
# Map areas with greater than 100% change
breaks_pop_change<-c(-79, 100, 3300)
labels_pop_change<-c("< 100% Change", "> 100% Change")
colors_pop_change<-c("blue", "green")
# Map areas with greater than 100% change
tm_shape(population_pct_change_2019_2009)+
tm_raster(colorNA="grey",
palette=colors_pop_change,
breaks=breaks_pop_change,
labels=labels_pop_change,
title="Percentage Change in NYC Population,\n2009-2019",
textNA="")+
tm_layout(legend.title.size=0.6,
legend.title.fontface = 2,
legend.text.size = 0.6,
main.title="Areas With Highest Relative Population Growth in NYC,\n2009-2019",
main.title.size=0.8)
# Map areas with greater than 100% change
breaks_pop_change<-c(-79, 100, 3300)
labels_pop_change<-c("< 100% Growth", "> 100% Growth")
colors_pop_change<-c("blue", "green")
# Map areas with greater than 100% change
tm_shape(population_pct_change_2019_2009)+
tm_raster(colorNA="grey",
palette=colors_pop_change,
breaks=breaks_pop_change,
labels=labels_pop_change,
title="Percentage Change in NYC Population,\n2009-2019",
textNA="")+
tm_layout(legend.title.size=0.6,
legend.title.fontface = 2,
legend.text.size = 0.6,
main.title="Areas With Highest Relative Population Growth in NYC,\n2009-2019",
main.title.size=0.8)
# Creates vector of legend breaks and assigns to object named "breaks_pop_change"
breaks_pop_change<-c(-79, 100, 3300)
# Creates character vector of legend labels and assigns it to an object named "labels_pop_change"
labels_pop_change<-c("< 100% Growth", "> 100% Growth")
# Creates character vector of colors and assigns it to an object named "colors_pop_change"
colors_pop_change<-c("blue", "green")
# Creates map of areas with greater than 100% change
tm_shape(population_pct_change_2019_2009)+
tm_raster(colorNA="grey",
palette=colors_pop_change,
breaks=breaks_pop_change,
labels=labels_pop_change,
title="Percentage Change in NYC Population,\n2009-2019",
textNA="")+
tm_layout(legend.title.size=0.6,
legend.title.fontface = 2,
legend.text.size = 0.6,
main.title="Areas With Highest Relative Population Growth in NYC,\n2009-2019",
main.title.size=0.8)
tm_shape(population_pct_change_2019_2009)+
tm_raster(colorNA="grey",
palette=colors_pop_change,
breaks=breaks_pop_change,
labels=labels_pop_change,
title="Percentage Change in NYC Population,\n2009-2019",
textNA="")+
tm_layout(legend.title.size=0.6,
legend.title.fontface = 2,
legend.text.size = 0.6,
main.title="Areas With Highest Relative Population Growth in NYC,\n2009-2019",
main.title.size=0.8)
tmap_mode("view")
tm_shape(population_pct_change_2019_2009)+
tm_raster(colorNA="grey",
palette=colors_pop_change,
breaks=breaks_pop_change,
labels=labels_pop_change,
title="Percentage Change in NYC Population,\n2009-2019",
textNA="")+
tm_layout(legend.title.size=0.6,
legend.title.fontface = 2,
legend.text.size = 0.6,
main.title="Areas With Highest Relative Population Growth in NYC,\n2009-2019",
main.title.size=0.8)
tmap_mode("plot")
nyc_boroughs_4326
# Prints
nyc_boroughs_population_zonal
nyc_boroughs
# Plot "nyc_subway_stops" over "nyc_boroughs"
tm_shape(nyc_boroughs)+
tm_polygons()+
tm_shape(nyc_subway_stops)+
tm_dots()
h
k
# View buffers
tm_shape(nyc_boroughs)+
tm_polygons()+
tm_shape(subway_500_buffers)+
tm_borders()+
tm_shape(nyc_subway_stops)+
tm_dots()
tm_shape(nyc_boroughs)+
tm_polygons()+
tm_shape(subway_500_buffers_dissolved)+
tm_borders("blue")
tm_shape(nyc_boroughs)+
tm_polygons()+
tm_shape(subway_500_buffers_dissolved)+
tm_polygons("blue")
tm_shape(nyc_boroughs)+
tm_polygons()+
tm_shape(subway_500_buffers)+
tm_borders("blue")
# Plot dissolved buffers
tm_shape(nyc_boroughs)+
tm_polygons()+
tm_shape(subway_500_buffers_dissolved)+
tm_borders()+
tm_shape(nyc_subway_stops)+
tm_dots()
t
nyc_pop_within_buffer
# Prints "percentage_outside_buffer"
percentage_outside_buffer
setwd("~/Documents/git_repositories/ARSC5040_GIS")
i
tm_shape(nyc_2019_population)+
tm_raster()
tmap_mode("view")
tm_shape(nyc_2019_population)+
tm_raster()
?rast
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/adra7980/Documents/git_repositories/ARSC5040_GIS/class_notes/class4/scripting_data")
# Read in NYC 2019 Raster
nyc_pop_2019<-raster("nyc_2019_pop.tif")
setwd("/Users/adra7980/Documents/git_repositories/ARSC5040_GIS/class_notes/class4/scripting_data")
# Read in NYC 2019 Raster
nyc_pop_2019<-raster("nyc_2019_pop.tif")
# Read in NYC subway stop data
nyc_subway_stops<-st_read("stops_nyc_subway_may2019.shp")
# Read in NYC borough data
nyc_boroughs<-st_read("nyu_2451_34490.shp")
sum(nyc_pop_2019)
setwd("/Users/adra7980/Documents/git_repositories/ARSC5040_GIS/class_notes/class4/scripting_data")
# Read in NYC 2019 Raster
nyc_pop_2019<-raster("nyc_2019_pop.tif")
# Read in NYC subway stop data
nyc_subway_stops<-st_read("stops_nyc_subway_may2019.shp")
# Read in NYC borough data
nyc_boroughs<-st_read("nyu_2451_34490.shp")
# Create 500m subway buffers
nyc_subway_500m_buffer<-st_buffer(nyc_subway_stops, 1640.42)
# Dissolve buffers
nyc_subway_500m_buffer_dissolved<-nyc_subway_500m_buffer %>%
group_by() %>%
summarise()
# Transform CRS of "nyc_subway_500m_buffer_dissolved" to match "nyc_pop_2019"
nyc_subway_500m_buffer_dissolved_4326<-nyc_subway_500m_buffer_dissolved %>%
st_transform(4326)
# Calculate population in buffer zone ("nyc_subway_500m_buffer_dissolved_4326") based on "nyc_2019_population" raster
nyc_pop_within_buffer<-exact_extract(nyc_pop_2019, nyc_subway_500m_buffer_dissolved_4326, fun="sum")
# Extract total NYC population
nyc_borough_4326<-nyc_boroughs %>% st_transform(4326)
nyc_pop<-sum(exact_extract(nyc_pop_2019, nyc_borough_4326 ))
xact_extract(nyc_pop_2019, nyc_borough_4326 )
exact_extract(nyc_pop_2019, nyc_borough_4326 )
nyc_pop<-sum(exact_extract(nyc_pop_2019, nyc_borough_4326, fun="sum" ))
nyc_pop
setwd("/Users/adra7980/Documents/git_repositories/ARSC5040_GIS/class_notes/class4/scripting_data")
# Read in NYC 2019 Raster
nyc_pop_2019<-raster("nyc_2019_pop.tif")
# Read in NYC subway stop data
nyc_subway_stops<-st_read("stops_nyc_subway_may2019.shp")
# Read in NYC borough data
nyc_boroughs<-st_read("nyu_2451_34490.shp")
# Create 500m subway buffers
nyc_subway_500m_buffer<-st_buffer(nyc_subway_stops, 1640.42)
# Dissolve buffers
nyc_subway_500m_buffer_dissolved<-nyc_subway_500m_buffer %>%
group_by() %>%
summarise()
# Transform CRS of "nyc_subway_500m_buffer_dissolved" to match "nyc_pop_2019"
nyc_subway_500m_buffer_dissolved_4326<-nyc_subway_500m_buffer_dissolved %>%
st_transform(4326)
# Calculate population in buffer zone ("nyc_subway_500m_buffer_dissolved_4326") based on "nyc_2019_population" raster
nyc_pop_within_buffer<-exact_extract(nyc_pop_2019, nyc_subway_500m_buffer_dissolved_4326, fun="sum")
# Extract total NYC population
nyc_borough_4326<-nyc_boroughs %>% st_transform(4326)
nyc_pop<-sum(exact_extract(nyc_pop_2019, nyc_borough_4326, fun="sum" ))
# Percentage Inside Buffer
pct_inside<-(nyc_pop_within_buffer/nyc_pop)*100
# Calculate Percentage Outside Buffer
pct_outside_buffer<-100-pct_inside
# Print "pct_outside_buffer"
pct_outside_buffer
traffic_stop_geography<-function(desired_geography){
geography_extract<-get_decennial(geography = desired_geography,
state="CO",
variables = "P001001",
year = 2010,
geometry=TRUE) %>%
st_transform(2232)
stop_geography_join<-st_join(co_aurora_sf_project, geography_extract)
stops_per_geography<-stop_geography_join %>%
group_by(GEOID, NAME) %>%
summarize(n()) %>%
rename(traffic_stops="n()")
stops_per_geography_df<-as.data.frame(stops_per_geography) %>%
select(-geometry)
return(stops_per_geography_df)
}
county_subdivision_stops<-traffic_stop_geography(desired_geography="county subdivision")
county_subdivision_stops<-traffic_stop_geography(desired_geography="county subdivision")
?dplyr
?select
300+219+191
710+60
219+191+61
+600
fahrenheit_to_celsius_converter_dataset<-function(fahrenheit_input){
celsius_output<-(fahrenheit_input-32)*(5/9)
final_dataset<-cbind(fahrenheit_input, celsius_output)
return(final_dataset)
}
f_vector<-c(44, 77, 89)
map(f_vector, fahrenheit_to_celsius_converter_dataset)
map_df(f_vector, fahrenheit_to_celsius_converter_dataset)
map_dfr(f_vector, fahrenheit_to_celsius_converter_dataset)
fahrenheit_to_celsius_converter_dataset<-function(fahrenheit_input){
celsius_output<-(fahrenheit_input-32)*(5/9)
final_dataset<-cbind(fahrenheit_input, celsius_output)
final_dataset_df<-as.data.frame(final_dataset)
return(final_dataset_df)
}
map_dfr(f_vector, fahrenheit_to_celsius_converter_dataset)
setwd("/Users/adra7980/Documents/git_repositories/ARSC5040_GIS/class_notes/class4/scripting_data")
# Read in NYC 2019 Raster
nyc_pop_2019<-raster("nyc_2019_pop.tif")
# Read in NYC subway stop data
nyc_subway_stops<-st_read("stops_nyc_subway_may2019.shp")
# Read in NYC borough data
nyc_boroughs<-st_read("nyu_2451_34490.shp")
# Create 500m subway buffers
nyc_subway_500m_buffer<-st_buffer(nyc_subway_stops, 1640.42)
# Dissolve buffers
nyc_subway_500m_buffer_dissolved<-nyc_subway_500m_buffer %>%
group_by() %>%
summarise()
# Transform CRS of "nyc_subway_500m_buffer_dissolved" to match "nyc_pop_2019"
nyc_subway_500m_buffer_dissolved_4326<-nyc_subway_500m_buffer_dissolved %>%
st_transform(4326)
# Calculate population in buffer zone ("nyc_subway_500m_buffer_dissolved_4326") based on "nyc_2019_population" raster
nyc_pop_within_buffer<-exact_extract(nyc_pop_2019, nyc_subway_500m_buffer_dissolved_4326, fun="sum")
# Extract total NYC population
nyc_borough_4326<-nyc_boroughs %>% st_transform(4326)
nyc_pop<-sum(exact_extract(nyc_pop_2019, nyc_borough_4326, fun="sum" ))
# Percentage Inside Buffer
pct_inside<-(nyc_pop_within_buffer/nyc_pop)*100
# Calculate Percentage Outside Buffer
pct_outside_buffer<-100-pct_inside
# Print "pct_outside_buffer"
pct_outside_buffer
nyc_subway_stops
nyc_pop
nyc_population_buffer<-function(buffer_distance_meters){
buffer_distance_feet<-buffer_distance_meters*3.281
nyc_subway_buffer<-st_buffer(nyc_subway_stops, buffer_distance_feet)
nyc_subway_buffer_dissolved<-nyc_subway_buffer %>%
group_by() %>%
summarise()
nyc_buffer_dissolved_4326<-nyc_subway_buffer_dissolved %>%
st_transform(4326)
nyc_pop_within_buffer<-exact_extract(nyc_pop_2019, nyc_buffer_dissolved_4326, fun="sum")
nyc_inside_buffer_pct<-(nyc_pop_within_buffer/8309940)*100
pct_outside_buffer<-100-nyc_inside_buffer_pct
return(pct_outside_buffer)
}
nyc_population_buffer(500)
nyc_population_buffer(650)
nyc_population_buffer(1000)
nyc_population_buffer<-function(buffer_distance_meters){
buffer_distance_feet<-buffer_distance_meters*3.281
nyc_subway_buffer<-st_buffer(nyc_subway_stops, buffer_distance_feet)
nyc_subway_buffer_dissolved<-nyc_subway_buffer %>%
group_by() %>%
summarise()
nyc_buffer_dissolved_4326<-nyc_subway_buffer_dissolved %>%
st_transform(4326)
nyc_pop_within_buffer<-exact_extract(nyc_pop_2019, nyc_buffer_dissolved_4326, fun="sum")
nyc_inside_buffer_pct<-(nyc_pop_within_buffer/8309940)*100
pct_outside_buffer<-100-nyc_inside_buffer_pct
final_df<-as.data.frame((cbind(buffer_distance_meters, pct_outside_buffer )))
return(final_df)
}
nyc_population_buffer(500)
nyc_population_buffer(650)
nyc_population_buffer(1000)
buffer_distances<-c(250, 500, 750, 1000, 1250)
map_dfr(buffer_distances, nyc_population_buffer)
buffer_distances<-c(250, 500, 750, 1000, 1250, 1500, 1750, 2000)
map_dfr(buffer_distances, nyc_population_buffer)
distance_table<-map_dfr(buffer_distances, nyc_population_buffer)
class(distance_table)
distance_table %>% rename(test=buffer_distances)
distance_table %>% rename("test"="buffer_distances")
distance_table
distance_table %>% rename("test"="buffer_distance_meters")
library(rgee)
ee_Initialize()
# load world's elevation from SRTM
srtm<-ee$Image("USGS/SRTMGL1_003")
# check metadata
ee_print(srtm)
100-29.56809
100-29.56809
70.43191-70.43041
?MODIStsp_get_prodlayers
nyc_boroughs
tm_shape(nyc_boroughs)+tm_polygons()
tm_mode("plot")
tmap_mode("plot")
nyc_buffer<-st_buffer(nyc_boroughs, 3000)
nyc_buffer+tm_polygons()+tm_shape(nyc_buffer)+tm_lines()
nyc_buffer+tm_polygons()+tm_shape(nyc_buffer)+tm_borders()
nyc_buffer
tm_shape(boroughs)+tm_polygons()+tm_shape(nyc_buffer)+tm_borders()
tm_shape(nyc_boroughs)+tm_polygons()+tm_shape(nyc_buffer)+tm_borders()
tm_shape(nyc_boroughs)+tm_polygons()+tm_shape(nyc_buffer)+tm_polygons()
tm_shape(nyc_boroughs)+tm_polygons()+tm_shape(nyc_buffer)+tm_borders()
getwd()
setwd("~/Documents/git_repositories/ARSC5040_GIS")
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics('images/rs1.png')
knitr::include_graphics('images/rs1.png')
knitr::include_graphics("images/rs1.png")
getwd()
getwd
getwd()
knitr::include_graphics("images/rs1.png")
setwd("~/Documents/git_repositories/ARSC5040_GIS/class_notes/class4/rs_presentation")
710/130
5*285*100
100000*0.03
![remotesensing](class_notes/class4/rs_presentation/rs1.png)
knitr::include_graphics("<img src="class_notes/class4/rs_presentation/rs1";> ")
<img src="/class_notes/class4/rs_presentation/rs1";>style="max-width:280px;float:right;">
<img src="/class_notes/class4/rs_presentation/rs1";>style="max-width:280px;float:right;">
<img src="/class_notes/class4/rs_presentation/rs1.png";>
<img src="/class_notes/class4/rs_presentation/rs1.png;">
![testin](class_notes/class4/rs_presentation/rs1.png)
![j]("class_notes/class4/rs_presentation/rs1.png")
![alt text here](class_notes/class4/rs_presentation/rs1.png)
![alt text here](class_notes/class4/rs_presentation/rs1.png)
knitr::opts_chunk$set(echo = TRUE)
![alt text here](class_notes/class4/rs_presentation/rs1.png)
![alt text here]("class_notes/class4/rs_presentation/rs1.png")
![alt text here]("/class_notes/class4/rs_presentation/rs1.png")
getwd()
setwd("/Users/adra7980/Documents/git_repositories/ARSC5040_GIS/")
![alt text here]("class_notes/class4/rs_presentation/rs1.png")
.inverse {
knitr::include_graphics('/Users/adra7980/Documents/git_repositories/ARSC5040_GIS/class_notes/class4/rs_presentation/rs2.png')
knitr::include_graphics('/Users/adra7980/Documents/git_repositories/ARSC5040_GIS/class_notes/class4/rs_presentation/rs1.png')
27*2712
1500/667
667*2
14*667
